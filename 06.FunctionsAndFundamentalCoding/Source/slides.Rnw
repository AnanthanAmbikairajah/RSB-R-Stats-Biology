\documentclass{beamer}

\usepackage{alltt}%
\usetheme{Boadilla}
\usecolortheme{seahorse}

\usepackage[utf8]{inputenc}
\usepackage{default}

\usepackage{xcolor}%for color mixing

\usepackage{amsmath}%
\usepackage{amsfonts}%
\usepackage{amssymb}%
\usepackage{graphicx}

\usepackage{tikz}
\usepackage{multirow}
\usepackage{booktabs}

\setbeamertemplate{itemize/enumerate body begin}{\small}

\usepackage{hyperref}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\title{Programming with functions in R}
\subtitle{Useful things, funny things and stat theory}
\author{Timoth\'ee Bonnet}
\date{\today}

\begin{document}

%\lstset{language=R}%code

\AtBeginSection[]
{
  \begin{frame}<beamer>
    \frametitle{}
    \tableofcontents[currentsection,sectionstyle=show/show,subsectionstyle=show/shaded/hide]% down vote\tableofcontents[currentsection,currentsubsection,hideothersubsections,sectionstyle=show/hide,subsectionstyle=show/shaded/hide] 
  \end{frame}
}

\begin{frame}{}%pre-start slide0
\centering
\includegraphics[width=0.35\textwidth]{figures/images.jpeg}
\includegraphics[width=0.35\textwidth]{figures/images2.jpeg}

\includegraphics[width=0.45\textwidth]{figures/recursive}\\ That last one will make sense in 2h
\end{frame}
%%%%%%%%%%%%

\begin{frame}
  \maketitle
\end{frame}

\section{Functions and where to find them}

\begin{frame}{Why make your own functions?}
  
\begin{block}{Pros}
  \begin{itemize}
    \item Less code writing
    \item Fewer mistakes
    \item Cleaner code
    \item More transferable code
  \end{itemize}
  Hence reproducibility and mental health
\end{block}  

\pause

\begin{alertblock}{Cons}
  \begin{itemize}
    \item More thinking
    \item Not always worth time investment
  \end{itemize}
\end{alertblock}

\end{frame}
%%%%%%%%%%%


\begin{frame}[fragile]{Anatomy of a function}

What is inside a function?
<<eval=FALSE>>=
  mean
  apply
@

\pause
Hmm, clearer information?
<<eval=FALSE>>=
  ?apply
  ?apply()
@
\pause

\begin{block}{Lots of code in one word}
\end{block}
\end{frame}
%%%%%%%%%%%%

\begin{frame}[fragile]{How to make a function}

<<>>=
myfunction <- function(){
  3+5
}

myfunction()
@

\texttt{myfunction} is now an object in the environment
\end{frame}
%%%%%%%%%%%%

\begin{frame}[fragile]{Input/output}

\begin{block}{}
  \begin{itemize}
  \item Zero to many input objects (Arguments)
  \item Return one object (Value)
  \end{itemize}
\end{block}

<<eval=FALSE>>=
  mean(x = c(3,7,1), na.rm = TRUE)
@

\pause
<<>>=
myfunction <- function(x, y){
  x+y
}

myfunction(2, 4); myfunction(3, 5)
@

\texttt{myfunction} now takes two arguments

\end{frame}
%%%%%%%%%%%%%%


\begin{frame}[fragile]{Input/output}

\begin{block}{}
  \begin{itemize}
  \item Zero to many input objects (Arguments)
  \item Return one object (Value)
  \end{itemize}
\end{block}

<<>>=
myfunction <- function(x, y){
  x-y
  x+y
}

myfunction(2, 4); myfunction(3, 5)
@

\textbf{Functions returns only the result from the last line by default}
\end{frame}
%%%%%%%%%%%%%



\begin{frame}[fragile]{Input/output}

\begin{block}{}
  \begin{itemize}
  \item Zero to many input objects (Arguments)
  \item Return one object (Value)
  \end{itemize}
\end{block}

<<>>=
myfunction <- function(x, y){
  subvalue <- x-y
  advalue <- x+y
  return(subvalue)
  x*y
}

myfunction(2, 4); myfunction(3, 5)
@

\textbf{Functions returns only \texttt{return()} is one is provided}
\end{frame}
%%%%%%%%%%%%%

\begin{frame}{Exercise 1 and 2}

\begin{enumerate}
  \item Write a function that return the product of three arbitrary numbers together (x*y*z) provided by the user
  \item Write a function that return the product of three arbitrary numbers together (x*y*z) as well as their sum (x+y+z)
\end{enumerate}

\end{frame}
%%%%%%%%%%%

\begin{frame}{Scope}
"What happens in Functions Stays in Functions" (unless\dots)

<<eval=TRUE, results='hide'>>=
x <- 10

myfunction <- function(x){
  x <- 5
}

myfunction(x=x)

x
@
What is the value of x ?

\end{frame}
%%%%%%%%%%%%


\begin{frame}[fragile]{Scope}
"What happens in Functions Stays in Functions" (unless\dots)

Save the output to an object
<<>>=
x <- 10
x <- myfunction(x=x)
x
@

\pause

Or special functions to break environment boundaries (Scoping assignment, see later)

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Sourcing as "primitive package"}

Do Exercise 3

\pause
\textbf{Complex code can easily be turned into a function}

\pause
\vfill
Save the function you just made to a new file "myfunctions.R".\\
You can now call ("source") this file and all the functions it contains: 
<<eval=FALSE>>=
source("myfunctions.R")
@


\end{frame}
%%%%%%%%%%%%

\begin{frame}{Fun time: Big exercise and stat theory!}

\textbf{Exercise 4!}

\end{frame}

\section{Funny things}

\begin{frame}[fragile]{Lists of functions!}

<<>>=
funs <- list(
  half = function(x) x / 2,
  double = function(x) x * 2
)
funs$double(10)
@
\end{frame}
%%%%%%%%%%%


\begin{frame}{The dot-dot-dot}
\textbf{See exercise 5}

\end{frame}
%%%%%%%%%%%%

\begin{frame}[fragile]{Scoping assignment}
Using \texttt{<<-} or \texttt{assign(x, value, inherits=TRUE)}

\textbf{See exercise 6}

Can be difficult, but can be useful (e.g. functions that create functions)
\end{frame}
%%%%%%%%%%%

\begin{frame}[fragile]{Recursive function}

A function can call another function, including itself\\
\textbf{See Exercises 7 and 8}

\end{frame}
%%%%%%%%%%%


\begin{frame}{To go further}
Everything you (didn't) want to know about functions in R: \url{https://adv-r.hadley.nz/functions.html\#introduction-5}


\end{frame}
%%%%%%%%%%%

\end{document}