\documentclass[12pt,a4paper]{scrartcl}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{tikz}
%\usepackage{silence}
\usepackage{mdframed}
%\WarningFilter{mdframed}{You got a bad break}
\usepackage[colorinlistoftodos]{todonotes}
\usepackage{listings}
\usepackage{color}
\colorlet{exampcol}{blue!10}
\usepackage{multicol}
\usepackage{booktabs}

\usepackage[autostyle, english = american]{csquotes}
\MakeOuterQuote{"}

\usepackage{hyperref}
\hypersetup{
    colorlinks,
    citecolor=black,
    filecolor=black,
    linkcolor=blue,
    urlcolor=black
}

\title{Exercises for statistical inference and stuff}
\date{\today}
\author{Timoth\'ee Bonnet}


\begin{document}


\maketitle

\tableofcontents

\section{Statistical inference and random numbers}

\subsection{Iris}
Some datasets are shipped with R (in R-base or in packages) and you can load them with the function data:

  <<>>=
    data("iris")
  @
  
  The dataset looks like that:
  
    <<boxplot, dev='tikz', fig.width=7, fig.height=5, eval=TRUE, out.width='0.7\\textwidth', out.height='0.5\\textwidth'>>=
  boxplot(Sepal.Length ~ Species,
          data = iris,
          drop = TRUE, ylab="Sepal length", xlab="Species")
  @

\textbf{If you like ggplot, redo a boxplot of the iris data using that package.}



\section{R-studio tricks}

\subsection{Column selection}

\subsection{Short-cuts}

\section{Linear models}


\begin{enumerate}
    \item Load Cdata.csv, fit models of y predited by x1 and x2, or x2 and x3. Something is weird, what is going on? What to do?
    \item For model that can be fitted with t.test, aov, and lm, is one of the function faster?
    \item Write your own code to obtain a prediction from a lm (that is, a simpler version of the predict function), with confidence interval. (extra toughness: do it using the matrix formulation of the analytical solution to a linear model)
  \end{enumerate}

\section{While-loop}

\subsection{What you need to know}
<<eval=FALSE>>=
    while(condition TRUE)
    {
      something
    }
  @
  
For instance:
<<eval=TRUE>>=
x <- 0
while(x<10)
    {
      x <- x+1
      print(x)
    }
  @
  
  
\subsection{Practice}

The function sample() takes 5 number between 1 and 6 (like 5 dice!):
<<>>=
x <- sample(x = 1:6, size = 5, replace = TRUE)
@

Are all die equal?
<<>>=
all(x == x[1])
@

Are they ever going to be equal?

\textbf{Write a while loop to find a case with all die equal}

\textbf{How many attempts does it take}

\textbf{Write a for while loop within a for loop to estimate how long it take on average.}


\section{If-else statement}

\subsection{What you need to know}

<<eval=FALSE>>=
if(condition)
{
  do something
}
@


<<eval=FALSE>>=
if(condition)
{
  do something
}else{
  do something else
}
@


For instance:
<<>>=
for (i in 1:10)
{
  if(i < 6)
  {
    print("tofu")
  }else{
    print("bacon")
  }
}

@

\subsection{Practice}

We can draw 100 random number following a random distribution of mean 0 and variance one with:
<<>>=
x <- rnorm(n = 100, mean = 0, sd = 1)
@

If we take their logarithm we obtain many "NaN" (Not A Number), because the log of a negative number is undefined:
<<>>=
log(x)
@

Let's say we want 0 instead of NaN.

\textbf{Use a for loop and an if-else statement to do that.}

\textbf{More difficult: Use a for loop and a while loop to re-draw random numbers until they are all positive.}

\end{document}
